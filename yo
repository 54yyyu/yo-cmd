#!/usr/bin/env python3
"""
yo - Convert natural language to terminal commands

A tool that uses Google Gemini API to convert natural language descriptions
into terminal commands. Makes terminal use easier for those unfamiliar with commands.
"""

import os
import sys
import json
import argparse
import readline
import shlex
from pathlib import Path

# Import Google Gemini API client
try:
    from google import genai
except ImportError:
    print("Google Gen AI library not found. Installing...")
    import subprocess
    subprocess.call([sys.executable, "-m", "pip", "install", "google-genai"])
    from google import genai

# Define colors for terminal output
class Colors:
    HEADER = '\033[95m'
    BLUE = '\033[94m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

# Constants
CONFIG_DIR = os.path.expanduser("~/.config/yo")
CONFIG_FILE = os.path.join(CONFIG_DIR, "config.json")
HISTORY_FILE = os.path.join(CONFIG_DIR, "history.json")
DEFAULT_MODEL = "gemini-2.5-flash-preview-05-20" # gemini-2.0-flash-lite 


def ensure_config_dir():
    """Ensure the config directory exists"""
    if not os.path.exists(CONFIG_DIR):
        os.makedirs(CONFIG_DIR)

def load_config():
    """Load the configuration file"""
    ensure_config_dir()
    if not os.path.exists(CONFIG_FILE):
        return {"api_key": None, "model": DEFAULT_MODEL}
    try:
        with open(CONFIG_FILE, 'r') as f:
            return json.load(f)
    except json.JSONDecodeError:
        return {"api_key": None, "model": DEFAULT_MODEL}

def save_config(config):
    """Save the configuration file"""
    ensure_config_dir()
    with open(CONFIG_FILE, 'w') as f:
        json.dump(config, f)

def load_history():
    """Load command history"""
    ensure_config_dir()
    if not os.path.exists(HISTORY_FILE):
        return []
    try:
        with open(HISTORY_FILE, 'r') as f:
            return json.load(f)
    except json.JSONDecodeError:
        return []

def save_history(history_entry):
    """Save command to history"""
    history = load_history()
    history.append(history_entry)
    # Keep only the last 100 entries
    history = history[-100:]
    ensure_config_dir()
    with open(HISTORY_FILE, 'w') as f:
        json.dump(history, f)

def get_api_key():
    """Get the API key interactively and save it."""
    while True:
        print(f"{Colors.YELLOW}Please enter your Google Gemini API key (or type 'exit' to cancel):{Colors.ENDC}")
        api_key_input = input("> ").strip()
        if not api_key_input:
            print(f"{Colors.RED}API key cannot be empty. Please try again.{Colors.ENDC}")
            continue
        if api_key_input.lower() == 'exit':
            print(f"{Colors.YELLOW}API key configuration cancelled.{Colors.ENDC}")
            return None
        break

    config = load_config()
    config["api_key"] = api_key_input
    save_config(config)
    print(f"{Colors.GREEN}API key saved successfully!{Colors.ENDC}")
    return api_key_input

def configure_api():
    """Configure the API key. Returns the key if successful, None otherwise."""
    api_key = get_api_key()
    if api_key:
        try:
            # Test the API key by creating a client
            client = genai.Client(api_key=api_key)
            print(f"{Colors.GREEN}API key configured successfully.{Colors.ENDC}")
            return api_key
        except Exception as e:
            print(f"{Colors.RED}Failed to configure API with the provided key: {str(e)}{Colors.ENDC}")
            # Optionally, remove the invalid key from config
            config = load_config()
            config["api_key"] = None
            save_config(config)
            return None
    return None

def initialize_genai():
    """Initialize the Gemini API client"""
    config = load_config()
    api_key = config.get("api_key")
    model_name = config.get("model", DEFAULT_MODEL)
    
    if not api_key:
        print(f"{Colors.YELLOW}No API key found.{Colors.ENDC}")
        api_key = get_api_key()
        if not api_key:
            print(f"{Colors.RED}API key is required to use this tool. Exiting.{Colors.ENDC}")
            sys.exit(1)
    
    # Just return the model name - no need to test API here
    return model_name

def generate_command(description, model_name):
    """Generate a terminal command based on natural language description"""
    config = load_config()
    api_key = config.get("api_key")

    if not api_key:
        print(f"{Colors.RED}API key not configured. Please run 'yo --api' first.{Colors.ENDC}")
        return None

    try:
        # Create a client instance with the API key
        client = genai.Client(api_key=api_key)
        
        prompt = f"""
Convert the following natural language description into a Unix/Linux terminal command:
"{description}"

Follow these rules:
1. Output ONLY the terminal command, nothing else.
2. Add a comment after the command, starting with '#', that briefly explains what the command does.
3. Format your response exactly like this: command # explanation
4. If the command is interactive (e.g., opens an editor) or would list files/directories, indicate this in the explanation if appropriate.
5. Be precise and concise in your explanation.
6. Do not include any warnings, introductory phrases like "Here is the command:", or additional text outside the command and its explanation.
7. If the request is ambiguous or cannot be translated into a single command, output: ERROR: Ambiguous request or cannot translate.

Examples:
- For "list all files": ls -la # Shows all files (including hidden ones) with details
- For "create a new folder called my_stuff": mkdir my_stuff # Creates a directory named "my_stuff"
- For "find all python files in current directory": find . -name "*.py" # Finds Python files in the current directory
"""

        response = client.models.generate_content(
            model=model_name,
            contents=prompt
        )
        
        # Access the response text
        if response and hasattr(response, 'text') and response.text:
            command_text = response.text.strip()
            if not command_text or command_text.startswith("ERROR:"):
                return None
            return command_text
        else:
            return None
    
    except Exception as e:
        error_message = str(e).lower()
        if "api key" in error_message or "permission_denied" in error_message or "authentication" in error_message:
            print(f"{Colors.YELLOW}API key issue. Update with: yo --api{Colors.ENDC}")
        else:
            print(f"{Colors.RED}Error: {str(e)}{Colors.ENDC}")
        return None

def show_directory_selector(base_command):
    """Show an interactive directory selector and append chosen path to command."""
    current_dir = os.getcwd()
    original_dir = current_dir
    selected_path = None

    while True:
        print(f"\n{Colors.BOLD}Current directory: {current_dir}{Colors.ENDC}")
        try:
            items = list(os.scandir(current_dir))
        except OSError as e:
            print(f"{Colors.RED}Error accessing directory {current_dir}: {e}{Colors.ENDC}")
            current_dir = original_dir # Reset to original directory on error
            print(f"{Colors.YELLOW}Resetting to starting directory: {current_dir}{Colors.ENDC}")
            continue

        directories = sorted([item for item in items if item.is_dir()], key=lambda x: x.name.lower())
        files = sorted([item for item in items if item.is_file()], key=lambda x: x.name.lower())

        print(f"\n{Colors.BLUE}Directories:{Colors.ENDC}")
        if not directories:
            print("  (No sub-directories)")
        for i, d in enumerate(directories):
            print(f"  {Colors.GREEN}{i+1}.{Colors.ENDC} {d.name}/")

        if files:
            print(f"\n{Colors.BLUE}Files (for reference):{Colors.ENDC}")
            for f in files:
                print(f"     {f.name}")

        print(f"\n{Colors.YELLOW}Options:{Colors.ENDC}")
        print(f"  Enter a number to navigate into a directory.")
        print(f"  Type '{Colors.GREEN}.{Colors.ENDC}' to select the current directory ({Colors.BOLD}{current_dir}{Colors.ENDC}).")
        print(f"  Type '{Colors.GREEN}..{Colors.ENDC}' to go to the parent directory.")
        print(f"  Type '{Colors.GREEN}c{Colors.ENDC}' or '{Colors.GREEN}cancel{Colors.ENDC}' to cancel selection.")
        
        choice = input(f"{Colors.BOLD}Your choice: {Colors.ENDC}").strip().lower()

        if choice == 'c' or choice == 'cancel':
            print(f"{Colors.YELLOW}Directory selection cancelled.{Colors.ENDC}")
            return None # Indicate cancellation
        elif choice == ".":
            selected_path = current_dir
            break
        elif choice == "..":
            parent_dir = str(Path(current_dir).parent)
            if parent_dir == current_dir: # Reached root
                print(f"{Colors.YELLOW}Already at the root directory.{Colors.ENDC}")
            else:
                current_dir = parent_dir
        elif choice.isdigit():
            try:
                dir_index = int(choice) - 1
                if 0 <= dir_index < len(directories):
                    current_dir = os.path.join(current_dir, directories[dir_index].name)
                else:
                    print(f"{Colors.RED}Invalid number. Please choose from the list.{Colors.ENDC}")
            except ValueError:
                print(f"{Colors.RED}Invalid input. Please enter a number, '.', '..', or 'c'.{Colors.ENDC}")
        else:
            print(f"{Colors.RED}Invalid input. Please enter a number, '.', '..', or 'c'.{Colors.ENDC}")

    if selected_path:
        # Ensure the path is quoted if it contains spaces for shell safety
        safe_selected_path = shlex.quote(selected_path)
        # Append the selected path to the base command.
        # This assumes the base_command is ready to have a path appended.
        # More sophisticated logic might be needed if the placeholder is complex.
        if "<PATH>" in base_command:
            final_command = base_command.replace("<PATH>", safe_selected_path)
        else:
            # If no <PATH> placeholder, append to the end. This might need adjustment based on command structure.
            final_command = f"{base_command} {safe_selected_path}"
        print(f"{Colors.GREEN}Selected path: {selected_path}{Colors.ENDC}")
        return final_command
    return None # Should not happen if loop broken correctly

def display_history():
    """Display command history"""
    history = load_history()
    if not history:
        print(f"{Colors.YELLOW}No command history found.{Colors.ENDC}")
        return
    
    print(f"{Colors.HEADER}Command History:{Colors.ENDC}")
    for i, entry in enumerate(history):
        nl_description = entry.get("description", "Unknown command")
        command = entry.get("command", "")
        explanation = entry.get("explanation", "")
        
        print(f"{i+1}. {Colors.BOLD}{nl_description}{Colors.ENDC}")
        print(f"   {Colors.GREEN}{command}{Colors.ENDC} {Colors.BLUE}# {explanation}{Colors.ENDC}")
        print()

def main():
    parser = argparse.ArgumentParser(description="yo - Convert natural language to terminal commands")
    parser.add_argument("description", nargs="*", help="Natural language description of the command you want")
    parser.add_argument("--api", action="store_true", help="Configure API key")
    parser.add_argument("--history", action="store_true", help="Show command history")
    parser.add_argument("--clear-history", action="store_true", help="Clear all command history")
    parser.add_argument("--model", type=str, help="Temporarily use a specific model for this query")
    args = parser.parse_args()

    if args.api:
        configure_api()
        return

    if args.history:
        display_history()
        return

    if args.clear_history:
        if input(f"{Colors.YELLOW}Are you sure you want to clear all command history? (y/n): {Colors.ENDC}").lower() == 'y':
            if os.path.exists(HISTORY_FILE):
                os.remove(HISTORY_FILE)
                print(f"{Colors.GREEN}Command history cleared.{Colors.ENDC}")
            else:
                print(f"{Colors.YELLOW}No history file found to clear.{Colors.ENDC}")
        else:
            print(f"{Colors.YELLOW}Operation cancelled.{Colors.ENDC}")
        return

    if not args.description:
        print(f"{Colors.YELLOW}Please provide a description of the command you want.{Colors.ENDC}")
        print(f"Usage: yo <description>")
        print(f"Example: yo show me all hidden files")
        return

    # Initialize the Gemini API
    model_name = initialize_genai()
    
    # Use specified model if provided
    if args.model:
        model_name = args.model

    # Generate the command
    description = " ".join(args.description)
    result = generate_command(description, model_name)

    if not result:
        return

    # Split the command and explanation
    parts = result.split('#', 1)
    if len(parts) >= 2:
        command = parts[0].strip()
        explanation = parts[1].strip()
    else:
        command = result.strip()
        explanation = "No explanation provided"

    # Save to history
    history_entry = {
        "description": description,
        "command": command,
        "explanation": explanation
    }
    save_history(history_entry)

    # Display the command with explanation
    print(f"{Colors.GREEN}{command} {Colors.BLUE}# {explanation}{Colors.ENDC}")

    # Ask if user wants to execute the command with full options
    execute = input(f"{Colors.YELLOW}Execute this command? (y/n/e to edit/c to copy, Enter=yes): {Colors.ENDC}").strip().lower()
    
    if execute == 'y' or execute == '':  # Auto-yes on Enter
        os.system(command)
    elif execute == 'e':
        # Set up readline to pre-fill the command for editing
        readline.set_startup_hook(lambda: readline.insert_text(command))
        try:
            edited_command = input(f"{Colors.YELLOW}Edit command: {Colors.ENDC}")
        finally:
            readline.set_startup_hook(None)
        
        if edited_command.strip():
            os.system(edited_command.strip())
        else:
            print(f"{Colors.YELLOW}No command entered, using original.{Colors.ENDC}")
            os.system(command)
    elif execute == 'c':
        try:
            import pyperclip
            pyperclip.copy(command)
            print(f"{Colors.GREEN}Command copied to clipboard!{Colors.ENDC}")
        except ImportError:
            print(f"{Colors.RED}pyperclip library not found. Install with: pip install pyperclip{Colors.ENDC}")
        except Exception as e:
            print(f"{Colors.RED}Could not copy to clipboard: {e}{Colors.ENDC}")
    else:
        print(f"{Colors.YELLOW}Command execution cancelled.{Colors.ENDC}")

if __name__ == "__main__":
    main()
